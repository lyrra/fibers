
;;;; Copyright (C) 2019 Larry Valkama <larryvalkama@protonmail.com>
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;;
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
;;;;

;; operating-system specifics
;; this could turn into a thin portability layer

;; FreeBSD operating specifics:
;; + Processor affinity functions are missing
;;   use a stub instead

(define-module (fibers system)
  #:use-module (system foreign)
  #:use-module (ice-9 threads)
  #:export (; Processor affinity stubs
            getaffinity
            setaffinity
            ; posix nanosleep/clock_nanosleep
            system-clock-nanosleep
            CLOCK_MONOTONIC
            CLOCK_THREAD_CPUTIME_ID))

(define exe (dynamic-link))

; Processor affinity stubs
(define (getaffinity any) (make-bitvector (total-processor-count) #t))
(define (setaffinity any lvl) 0)

(define clockid-t int32)

; use the monotonic-fast, it is updated every hertz, ie granularity. Check your kern.hz
(define CLOCK_MONOTONIC 4)
(define CLOCK_MONOTONIC_FAST 12)
(define CLOCK_THREAD_CPUTIME_ID 14)

; unfortunately clock_nanosleep(other-cpu-clockid,...) barfs, and we musn't
; call error in clock-nanosleep, because it is called by the interrupt
; thread, which is supposed to preempt some other thread.
; And doing no preemption will lead to deadlocks (catched in test case preemption.scm).
(define system-clock-nanosleep
  (let* ((ptr (dynamic-pointer "clock_nanosleep" exe))
         (proc (pointer->procedure int ptr (list clockid-t int '* '*))))
    (lambda* (clockid flags buf)
      ; warning, perhaps clock-nanosleep should just return an error-code?
      ; though, if it doesn't sleep (which will yield the thread), no preemption is made
      ; and all bets are off! Perhaps then, call the more coarse/slow nanosleep?
      (proc CLOCK_MONOTONIC_FAST flags buf buf))))
